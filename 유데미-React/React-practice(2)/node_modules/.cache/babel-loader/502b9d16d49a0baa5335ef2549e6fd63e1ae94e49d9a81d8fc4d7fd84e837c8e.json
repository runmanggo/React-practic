{"ast":null,"code":"var _jsxFileName = \"/Users/mangkko/Desktop/React-practice/\\uC720\\uB370\\uBBF8-React/React-practice(2)/src/App.js\",\n  _s = $RefreshSig$();\nimport UserInput from \"./components/UserInput/UserInput\";\nimport Header from \"./components/Header/Header\";\nimport ResultTable from \"./components/ResultTable/ResultTable\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //최종결과를 상태로 저장하지 않고 userInput을 받아 setUserInput상태 업데이트 함수 설정가능\n  const [userInput, setUserInput] = useState(null);\n  const calculateHandler = userInput => {\n    setUserInput(userInput); //useState(null)에 값을 전달\n  };\n\n  const yearlyData = []; // 연도별 데이터를 저장하기 위해서\n\n  let currentSavings = +userInput[\"current-savings\"]; // 현재 저축액\n  const yearlyContribution = +userInput[\"yearly-contribution\"]; // 연간저축액\n  const expectedReturn = +userInput[\"expected-return\"] / 100; //예상 이자율\n  const duration = +userInput[\"duration\"]; // 계산기간\n\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn; //현재 저축액에 대한 연간 이자\n    currentSavings += yearlyInterest + yearlyContribution; //현재저축액 += (현재저축*이자율)\n    yearlyData.push({\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      // 해당 연도에 발생한 연간 이자\n      savingsEndOfYear: currentSavings,\n      //해당 연도의 마지막에 남은 총 저축액\n      yearlyContribution: yearlyContribution //해당 연도에 발생한 연간 저축 금액\n    });\n  } //이 코드가 실행되면 app.js 컴포넌트 상태가 바뀜\n\n  //명시적\n\n  // const [results, setResults] = useState(null); // 연도별 데이터를 저장하기 위해서\n\n  // const calculateHandler = (userInput) => {\n  //   const yearlyData = []; // 연도별 데이터를 저장하기 위해서\n\n  //   let currentSavings = +userInput[\"current-savings\"]; // 현재 저축액\n  //   const yearlyContribution = +userInput[\"yearly-contribution\"]; // 연간저축액\n  //   const expectedReturn = +userInput[\"expected-return\"] / 100; //예상 이자율\n  //   const duration = +userInput[\"duration\"]; // 계산기간\n\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn; //현재 저축액에 대한 연간 이자\n  //     currentSavings += yearlyInterest + yearlyContribution; //현재저축액 += (현재저축*이자율)\n  //     yearlyData.push({\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest, // 해당 연도에 발생한 연간 이자\n  //       savingsEndOfYear: currentSavings, //해당 연도의 마지막에 남은 총 저축액\n  //       yearlyContribution: yearlyContribution, //해당 연도에 발생한 연간 저축 금액\n  //     });\n  //   }\n  //   setResults(yearlyData);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {\n      onCalculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nCOotz9vTgzH/m310d2/03oFEtk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["UserInput","Header","ResultTable","useState","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onCalculate","_c","$RefreshReg$"],"sources":["/Users/mangkko/Desktop/React-practice/유데미-React/React-practice(2)/src/App.js"],"sourcesContent":["import UserInput from \"./components/UserInput/UserInput\";\nimport Header from \"./components/Header/Header\";\nimport ResultTable from \"./components/ResultTable/ResultTable\";\nimport { useState } from \"react\";\n\nfunction App() {\n  //최종결과를 상태로 저장하지 않고 userInput을 받아 setUserInput상태 업데이트 함수 설정가능\n  const [userInput, setUserInput] = useState(null);\n\n  const calculateHandler = (userInput) => {\n    setUserInput(userInput); //useState(null)에 값을 전달\n  };\n\n  const yearlyData = []; // 연도별 데이터를 저장하기 위해서\n\n  let currentSavings = +userInput[\"current-savings\"]; // 현재 저축액\n  const yearlyContribution = +userInput[\"yearly-contribution\"]; // 연간저축액\n  const expectedReturn = +userInput[\"expected-return\"] / 100; //예상 이자율\n  const duration = +userInput[\"duration\"]; // 계산기간\n\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn; //현재 저축액에 대한 연간 이자\n    currentSavings += yearlyInterest + yearlyContribution; //현재저축액 += (현재저축*이자율)\n    yearlyData.push({\n      year: i + 1,\n      yearlyInterest: yearlyInterest, // 해당 연도에 발생한 연간 이자\n      savingsEndOfYear: currentSavings, //해당 연도의 마지막에 남은 총 저축액\n      yearlyContribution: yearlyContribution, //해당 연도에 발생한 연간 저축 금액\n    });\n  } //이 코드가 실행되면 app.js 컴포넌트 상태가 바뀜\n\n  //명시적\n\n  // const [results, setResults] = useState(null); // 연도별 데이터를 저장하기 위해서\n\n  // const calculateHandler = (userInput) => {\n  //   const yearlyData = []; // 연도별 데이터를 저장하기 위해서\n\n  //   let currentSavings = +userInput[\"current-savings\"]; // 현재 저축액\n  //   const yearlyContribution = +userInput[\"yearly-contribution\"]; // 연간저축액\n  //   const expectedReturn = +userInput[\"expected-return\"] / 100; //예상 이자율\n  //   const duration = +userInput[\"duration\"]; // 계산기간\n\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn; //현재 저축액에 대한 연간 이자\n  //     currentSavings += yearlyInterest + yearlyContribution; //현재저축액 += (현재저축*이자율)\n  //     yearlyData.push({\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest, // 해당 연도에 발생한 연간 이자\n  //       savingsEndOfYear: currentSavings, //해당 연도의 마지막에 남은 총 저축액\n  //       yearlyContribution: yearlyContribution, //해당 연도에 발생한 연간 저축 금액\n  //     });\n  //   }\n  //   setResults(yearlyData);\n  // };\n\n  return (\n    <div>\n      <Header />\n      <UserInput onCalculate={calculateHandler} />\n      <ResultTable />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,kCAAkC;AACxD,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,WAAW,MAAM,sCAAsC;AAC9D,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMO,gBAAgB,GAAIF,SAAS,IAAK;IACtCC,YAAY,CAACD,SAAS,CAAC,CAAC,CAAC;EAC3B,CAAC;;EAED,MAAMG,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMK,kBAAkB,GAAG,CAACL,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAMM,cAAc,GAAG,CAACN,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG,CAAC,CAAC;EAC5D,MAAMO,QAAQ,GAAG,CAACP,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;;EAEzC,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc,CAAC,CAAC;IACxDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB,CAAC,CAAC;IACvDF,UAAU,CAACO,IAAI,CAAC;MACdC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXC,cAAc,EAAEA,cAAc;MAAE;MAChCG,gBAAgB,EAAER,cAAc;MAAE;MAClCC,kBAAkB,EAAEA,kBAAkB,CAAE;IAC1C,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACER,OAAA;IAAAgB,QAAA,gBACEhB,OAAA,CAACJ,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVpB,OAAA,CAACL,SAAS;MAAC0B,WAAW,EAAEhB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5CpB,OAAA,CAACH,WAAW;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAAClB,EAAA,CA1DQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA4DZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}